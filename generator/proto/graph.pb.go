// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        v5.28.3
// source: graph.proto

package proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Node represents an AS node
type Node struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Asn           uint32                 `protobuf:"varint,1,opt,name=asn,proto3" json:"asn,omitempty"`
	Desc          string                 `protobuf:"bytes,2,opt,name=desc,proto3" json:"desc,omitempty"`
	Routes        []*Route               `protobuf:"bytes,3,rep,name=routes,proto3" json:"routes,omitempty"`
	Centrality    *Centrality            `protobuf:"bytes,4,opt,name=centrality,proto3" json:"centrality,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Node) Reset() {
	*x = Node{}
	mi := &file_graph_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Node) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Node) ProtoMessage() {}

func (x *Node) ProtoReflect() protoreflect.Message {
	mi := &file_graph_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Node.ProtoReflect.Descriptor instead.
func (*Node) Descriptor() ([]byte, []int) {
	return file_graph_proto_rawDescGZIP(), []int{0}
}

func (x *Node) GetAsn() uint32 {
	if x != nil {
		return x.Asn
	}
	return 0
}

func (x *Node) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

func (x *Node) GetRoutes() []*Route {
	if x != nil {
		return x.Routes
	}
	return nil
}

func (x *Node) GetCentrality() *Centrality {
	if x != nil {
		return x.Centrality
	}
	return nil
}

// Centrality stores the centrality metrics of a node
type Centrality struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Degree        float64                `protobuf:"fixed64,1,opt,name=degree,proto3" json:"degree,omitempty"`
	Betweenness   float64                `protobuf:"fixed64,2,opt,name=betweenness,proto3" json:"betweenness,omitempty"`
	Closeness     float64                `protobuf:"fixed64,3,opt,name=closeness,proto3" json:"closeness,omitempty"`
	Index         uint32                 `protobuf:"varint,4,opt,name=index,proto3" json:"index,omitempty"` // dn42Index
	Ranking       uint32                 `protobuf:"varint,5,opt,name=ranking,proto3" json:"ranking,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Centrality) Reset() {
	*x = Centrality{}
	mi := &file_graph_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Centrality) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Centrality) ProtoMessage() {}

func (x *Centrality) ProtoReflect() protoreflect.Message {
	mi := &file_graph_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Centrality.ProtoReflect.Descriptor instead.
func (*Centrality) Descriptor() ([]byte, []int) {
	return file_graph_proto_rawDescGZIP(), []int{1}
}

func (x *Centrality) GetDegree() float64 {
	if x != nil {
		return x.Degree
	}
	return 0
}

func (x *Centrality) GetBetweenness() float64 {
	if x != nil {
		return x.Betweenness
	}
	return 0
}

func (x *Centrality) GetCloseness() float64 {
	if x != nil {
		return x.Closeness
	}
	return 0
}

func (x *Centrality) GetIndex() uint32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *Centrality) GetRanking() uint32 {
	if x != nil {
		return x.Ranking
	}
	return 0
}

// Route represents a route entry
type Route struct {
	state  protoimpl.MessageState `protogen:"open.v1"`
	Length uint32                 `protobuf:"varint,1,opt,name=length,proto3" json:"length,omitempty"`
	// Types that are valid to be assigned to Ip:
	//
	//	*Route_Ipv4
	//	*Route_Ipv6
	Ip            isRoute_Ip `protobuf_oneof:"ip"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Route) Reset() {
	*x = Route{}
	mi := &file_graph_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Route) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Route) ProtoMessage() {}

func (x *Route) ProtoReflect() protoreflect.Message {
	mi := &file_graph_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Route.ProtoReflect.Descriptor instead.
func (*Route) Descriptor() ([]byte, []int) {
	return file_graph_proto_rawDescGZIP(), []int{2}
}

func (x *Route) GetLength() uint32 {
	if x != nil {
		return x.Length
	}
	return 0
}

func (x *Route) GetIp() isRoute_Ip {
	if x != nil {
		return x.Ip
	}
	return nil
}

func (x *Route) GetIpv4() uint32 {
	if x != nil {
		if x, ok := x.Ip.(*Route_Ipv4); ok {
			return x.Ipv4
		}
	}
	return 0
}

func (x *Route) GetIpv6() *IPv6 {
	if x != nil {
		if x, ok := x.Ip.(*Route_Ipv6); ok {
			return x.Ipv6
		}
	}
	return nil
}

type isRoute_Ip interface {
	isRoute_Ip()
}

type Route_Ipv4 struct {
	Ipv4 uint32 `protobuf:"varint,2,opt,name=ipv4,proto3,oneof"`
}

type Route_Ipv6 struct {
	Ipv6 *IPv6 `protobuf:"bytes,3,opt,name=ipv6,proto3,oneof"`
}

func (*Route_Ipv4) isRoute_Ip() {}

func (*Route_Ipv6) isRoute_Ip() {}

// IPv6 represents an IPv6 address
type IPv6 struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	HighH32       uint32                 `protobuf:"varint,1,opt,name=high_h32,json=highH32,proto3" json:"high_h32,omitempty"`
	HighL32       uint32                 `protobuf:"varint,2,opt,name=high_l32,json=highL32,proto3" json:"high_l32,omitempty"`
	LowH32        uint32                 `protobuf:"varint,3,opt,name=low_h32,json=lowH32,proto3" json:"low_h32,omitempty"`
	LowL32        uint32                 `protobuf:"varint,4,opt,name=low_l32,json=lowL32,proto3" json:"low_l32,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *IPv6) Reset() {
	*x = IPv6{}
	mi := &file_graph_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IPv6) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IPv6) ProtoMessage() {}

func (x *IPv6) ProtoReflect() protoreflect.Message {
	mi := &file_graph_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IPv6.ProtoReflect.Descriptor instead.
func (*IPv6) Descriptor() ([]byte, []int) {
	return file_graph_proto_rawDescGZIP(), []int{3}
}

func (x *IPv6) GetHighH32() uint32 {
	if x != nil {
		return x.HighH32
	}
	return 0
}

func (x *IPv6) GetHighL32() uint32 {
	if x != nil {
		return x.HighL32
	}
	return 0
}

func (x *IPv6) GetLowH32() uint32 {
	if x != nil {
		return x.LowH32
	}
	return 0
}

func (x *IPv6) GetLowL32() uint32 {
	if x != nil {
		return x.LowL32
	}
	return 0
}

// Link represents a connection between two ASes
type Link struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Source        uint32                 `protobuf:"varint,1,opt,name=source,proto3" json:"source,omitempty"`
	Target        uint32                 `protobuf:"varint,2,opt,name=target,proto3" json:"target,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Link) Reset() {
	*x = Link{}
	mi := &file_graph_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Link) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Link) ProtoMessage() {}

func (x *Link) ProtoReflect() protoreflect.Message {
	mi := &file_graph_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Link.ProtoReflect.Descriptor instead.
func (*Link) Descriptor() ([]byte, []int) {
	return file_graph_proto_rawDescGZIP(), []int{4}
}

func (x *Link) GetSource() uint32 {
	if x != nil {
		return x.Source
	}
	return 0
}

func (x *Link) GetTarget() uint32 {
	if x != nil {
		return x.Target
	}
	return 0
}

// Contains metadata information about the graph.
type Metadata struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	Vendor             string                 `protobuf:"bytes,1,opt,name=vendor,proto3" json:"vendor,omitempty"`
	GeneratedTimestamp uint64                 `protobuf:"varint,2,opt,name=generated_timestamp,json=generatedTimestamp,proto3" json:"generated_timestamp,omitempty"`
	DataTimestamp      uint64                 `protobuf:"varint,3,opt,name=data_timestamp,json=dataTimestamp,proto3" json:"data_timestamp,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *Metadata) Reset() {
	*x = Metadata{}
	mi := &file_graph_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Metadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Metadata) ProtoMessage() {}

func (x *Metadata) ProtoReflect() protoreflect.Message {
	mi := &file_graph_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Metadata.ProtoReflect.Descriptor instead.
func (*Metadata) Descriptor() ([]byte, []int) {
	return file_graph_proto_rawDescGZIP(), []int{5}
}

func (x *Metadata) GetVendor() string {
	if x != nil {
		return x.Vendor
	}
	return ""
}

func (x *Metadata) GetGeneratedTimestamp() uint64 {
	if x != nil {
		return x.GeneratedTimestamp
	}
	return 0
}

func (x *Metadata) GetDataTimestamp() uint64 {
	if x != nil {
		return x.DataTimestamp
	}
	return 0
}

// Graph represents the entire network topology
type Graph struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Metadata      *Metadata              `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
	Nodes         []*Node                `protobuf:"bytes,2,rep,name=nodes,proto3" json:"nodes,omitempty"`
	Links         []*Link                `protobuf:"bytes,3,rep,name=links,proto3" json:"links,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Graph) Reset() {
	*x = Graph{}
	mi := &file_graph_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Graph) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Graph) ProtoMessage() {}

func (x *Graph) ProtoReflect() protoreflect.Message {
	mi := &file_graph_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Graph.ProtoReflect.Descriptor instead.
func (*Graph) Descriptor() ([]byte, []int) {
	return file_graph_proto_rawDescGZIP(), []int{6}
}

func (x *Graph) GetMetadata() *Metadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *Graph) GetNodes() []*Node {
	if x != nil {
		return x.Nodes
	}
	return nil
}

func (x *Graph) GetLinks() []*Link {
	if x != nil {
		return x.Links
	}
	return nil
}

var File_graph_proto protoreflect.FileDescriptor

var file_graph_proto_rawDesc = string([]byte{
	0x0a, 0x0b, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x08, 0x64,
	0x6e, 0x34, 0x32, 0x5f, 0x6d, 0x61, 0x70, 0x22, 0x8b, 0x01, 0x0a, 0x04, 0x4e, 0x6f, 0x64, 0x65,
	0x12, 0x10, 0x0a, 0x03, 0x61, 0x73, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x61,
	0x73, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x65, 0x73, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x64, 0x65, 0x73, 0x63, 0x12, 0x27, 0x0a, 0x06, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x64, 0x6e, 0x34, 0x32, 0x5f, 0x6d, 0x61,
	0x70, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x52, 0x06, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x73, 0x12,
	0x34, 0x0a, 0x0a, 0x63, 0x65, 0x6e, 0x74, 0x72, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x64, 0x6e, 0x34, 0x32, 0x5f, 0x6d, 0x61, 0x70, 0x2e, 0x43,
	0x65, 0x6e, 0x74, 0x72, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x0a, 0x63, 0x65, 0x6e, 0x74, 0x72,
	0x61, 0x6c, 0x69, 0x74, 0x79, 0x22, 0x94, 0x01, 0x0a, 0x0a, 0x43, 0x65, 0x6e, 0x74, 0x72, 0x61,
	0x6c, 0x69, 0x74, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x65, 0x67, 0x72, 0x65, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x64, 0x65, 0x67, 0x72, 0x65, 0x65, 0x12, 0x20, 0x0a, 0x0b,
	0x62, 0x65, 0x74, 0x77, 0x65, 0x65, 0x6e, 0x6e, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x0b, 0x62, 0x65, 0x74, 0x77, 0x65, 0x65, 0x6e, 0x6e, 0x65, 0x73, 0x73, 0x12, 0x1c,
	0x0a, 0x09, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x6e, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x09, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x6e, 0x65, 0x73, 0x73, 0x12, 0x14, 0x0a, 0x05,
	0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x69, 0x6e, 0x64,
	0x65, 0x78, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x07, 0x72, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x22, 0x61, 0x0a, 0x05,
	0x52, 0x6f, 0x75, 0x74, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x14, 0x0a,
	0x04, 0x69, 0x70, 0x76, 0x34, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x00, 0x52, 0x04, 0x69,
	0x70, 0x76, 0x34, 0x12, 0x24, 0x0a, 0x04, 0x69, 0x70, 0x76, 0x36, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0e, 0x2e, 0x64, 0x6e, 0x34, 0x32, 0x5f, 0x6d, 0x61, 0x70, 0x2e, 0x49, 0x50, 0x76,
	0x36, 0x48, 0x00, 0x52, 0x04, 0x69, 0x70, 0x76, 0x36, 0x42, 0x04, 0x0a, 0x02, 0x69, 0x70, 0x22,
	0x6e, 0x0a, 0x04, 0x49, 0x50, 0x76, 0x36, 0x12, 0x19, 0x0a, 0x08, 0x68, 0x69, 0x67, 0x68, 0x5f,
	0x68, 0x33, 0x32, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x68, 0x69, 0x67, 0x68, 0x48,
	0x33, 0x32, 0x12, 0x19, 0x0a, 0x08, 0x68, 0x69, 0x67, 0x68, 0x5f, 0x6c, 0x33, 0x32, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x68, 0x69, 0x67, 0x68, 0x4c, 0x33, 0x32, 0x12, 0x17, 0x0a,
	0x07, 0x6c, 0x6f, 0x77, 0x5f, 0x68, 0x33, 0x32, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06,
	0x6c, 0x6f, 0x77, 0x48, 0x33, 0x32, 0x12, 0x17, 0x0a, 0x07, 0x6c, 0x6f, 0x77, 0x5f, 0x6c, 0x33,
	0x32, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x6c, 0x6f, 0x77, 0x4c, 0x33, 0x32, 0x22,
	0x36, 0x0a, 0x04, 0x4c, 0x69, 0x6e, 0x6b, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x22, 0x7a, 0x0a, 0x08, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x12, 0x2f, 0x0a, 0x13, 0x67,
	0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x12, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61,
	0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x25, 0x0a, 0x0e,
	0x64, 0x61, 0x74, 0x61, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x64, 0x61, 0x74, 0x61, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x22, 0x83, 0x01, 0x0a, 0x05, 0x47, 0x72, 0x61, 0x70, 0x68, 0x12, 0x2e, 0x0a,
	0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x12, 0x2e, 0x64, 0x6e, 0x34, 0x32, 0x5f, 0x6d, 0x61, 0x70, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x24, 0x0a,
	0x05, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x64,
	0x6e, 0x34, 0x32, 0x5f, 0x6d, 0x61, 0x70, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x05, 0x6e, 0x6f,
	0x64, 0x65, 0x73, 0x12, 0x24, 0x0a, 0x05, 0x6c, 0x69, 0x6e, 0x6b, 0x73, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x64, 0x6e, 0x34, 0x32, 0x5f, 0x6d, 0x61, 0x70, 0x2e, 0x4c, 0x69,
	0x6e, 0x6b, 0x52, 0x05, 0x6c, 0x69, 0x6e, 0x6b, 0x73, 0x42, 0x24, 0x5a, 0x22, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x69, 0x65, 0x64, 0x6f, 0x6e, 0x2f, 0x64, 0x6e,
	0x34, 0x32, 0x5f, 0x6d, 0x61, 0x70, 0x5f, 0x67, 0x6f, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_graph_proto_rawDescOnce sync.Once
	file_graph_proto_rawDescData []byte
)

func file_graph_proto_rawDescGZIP() []byte {
	file_graph_proto_rawDescOnce.Do(func() {
		file_graph_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_graph_proto_rawDesc), len(file_graph_proto_rawDesc)))
	})
	return file_graph_proto_rawDescData
}

var file_graph_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_graph_proto_goTypes = []any{
	(*Node)(nil),       // 0: dn42_map.Node
	(*Centrality)(nil), // 1: dn42_map.Centrality
	(*Route)(nil),      // 2: dn42_map.Route
	(*IPv6)(nil),       // 3: dn42_map.IPv6
	(*Link)(nil),       // 4: dn42_map.Link
	(*Metadata)(nil),   // 5: dn42_map.Metadata
	(*Graph)(nil),      // 6: dn42_map.Graph
}
var file_graph_proto_depIdxs = []int32{
	2, // 0: dn42_map.Node.routes:type_name -> dn42_map.Route
	1, // 1: dn42_map.Node.centrality:type_name -> dn42_map.Centrality
	3, // 2: dn42_map.Route.ipv6:type_name -> dn42_map.IPv6
	5, // 3: dn42_map.Graph.metadata:type_name -> dn42_map.Metadata
	0, // 4: dn42_map.Graph.nodes:type_name -> dn42_map.Node
	4, // 5: dn42_map.Graph.links:type_name -> dn42_map.Link
	6, // [6:6] is the sub-list for method output_type
	6, // [6:6] is the sub-list for method input_type
	6, // [6:6] is the sub-list for extension type_name
	6, // [6:6] is the sub-list for extension extendee
	0, // [0:6] is the sub-list for field type_name
}

func init() { file_graph_proto_init() }
func file_graph_proto_init() {
	if File_graph_proto != nil {
		return
	}
	file_graph_proto_msgTypes[2].OneofWrappers = []any{
		(*Route_Ipv4)(nil),
		(*Route_Ipv6)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_graph_proto_rawDesc), len(file_graph_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_graph_proto_goTypes,
		DependencyIndexes: file_graph_proto_depIdxs,
		MessageInfos:      file_graph_proto_msgTypes,
	}.Build()
	File_graph_proto = out.File
	file_graph_proto_goTypes = nil
	file_graph_proto_depIdxs = nil
}
